---
title: "Experiment report"
author: "Dusselier Group"
format:
  html: 
    toc: true
    self-contained: true
params:
  df: NA
  bd: NA
  gc: NA
  ms: NA
  path: NA
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, warning = F)
pacman::p_load(reactable, tidyverse, reactablefmtr, plotly, dygraphs)
```

```{css}
.dygraphs.html-widget.html-fill-item.html-widget-static-bound {
  overflow: hidden;
}

.plotly.html-widget.html-widget-static-bound.js-plotly-plot {
  height: auto !important; 
}
```

```{r}
custom_reactable <- function(bd, ...){
  reactable(
    bd,
    defaultColDef = colDef(
      align = "center",
      headerStyle = list(background = "#f7f7f8")), 
    defaultPageSize = 10, onClick = 'select',
    bordered = T, highlight = T, resizable = T, showSortable = T,
    ...
  )
}
```

::: {.callout-note}
**Sample name**: `r params$path %>% as.character %>% strsplit('/') %>% unlist %>% {.[length(.)]}`
:::

### Experiment description

#### Leak test

```{r}
test <- params$df %>%
          as_tibble() %>%
          rowwise() %>%
          mutate(sum = sum(fic_110, fic_120, fic_130, fic_140)) %>%
          ungroup() %>%
          filter(n > 5 & p_set != 0 & sum == 0) %>% 
          select(event, n, p_set, sum, pt_310) %>%
          filter(event == max(event)) %>%
          slice(c(1, n())) %>% 
          {c(event = unique(.$event), dif = .$pt_310[1] - .$pt_310[2])}

if(!is.na(test[1])){
  str_glue("Event: {test[1]} \nPressure difference: {round(test[2], 2)}")
} else {
  cat("No Leak test found in data")
}
```

#### Log summary

```{r}
params$bd %>%
  as_tibble() %>%
  slice_head(n = 1, by = event) %>%
      select(event, date_time, name, time_duration) %>%
      mutate(date_time = as.POSIXct(date_time, origin="1970-01-01", tz="UTC")) %>%
      custom_reactable(
        columns = list(
          event = colDef(name = 'Event', width = 100),
          date_time = colDef(name = 'Start time', width = 200),
          name = colDef(name = 'Event name', minWidth = 200),
          time_duration = colDef(name = 'Duration', width = 100)
        )
      )
```

#### Composition plot

::: {.panel-tabset}

##### Time
```{r}
#| column: body-outset

plot <- params$gc %>%
  as_tibble() %>%
        select(-injection) %>%
        pivot_longer(cols = 5:ncol(.), names_to = 'Compound', values_to = 'value') %>%
        mutate(Compound = str_replace_all(Compound, '_', ' ') %>% str_to_title(),
               time = as.numeric(time)) %>%
        ggplot(aes(x = time, y = value, fill = Compound)) +
          geom_area(alpha = 0.6, color = 'black', linewidth = 0.2) +
          geom_hline(yintercept = 100, linetype = 'dashed') +
          labs(x = 'Reaction time (min)', y = "Composition") +
          facet_wrap(~event, scales = 'free', ncol = 2) +
          theme_bw() +
          theme(axis.text = element_text(color = 'black', size = 10),
                axis.title = element_text(size = 12),
                panel.spacing = unit(1, "lines"),
                panel.background = element_rect(colour = 'black'),
                plot.margin = unit(c(0, 0, 2, 0), "cm"))

total_height <- 180 * length(unique(params$gc$event))
ggplotly(plot, width = 900, height = total_height)
```

##### Temperature

```{r}
#| column: body-outset

plot <- params$gc %>%
  as_tibble() %>%
        select(-injection) %>%
        pivot_longer(cols = 5:ncol(.), names_to = 'Compound', values_to = 'value') %>%
        mutate(Compound = str_replace_all(Compound, '_', ' ') %>% str_to_title(),
               time = as.numeric(time)) %>%
        ggplot(aes(x = tic_300_pv, y = value, fill = Compound)) +
          geom_area(alpha = 0.6, color = 'black', linewidth = 0.2) +
          geom_hline(yintercept = 100, linetype = 'dashed') +
          labs(x = 'Temperature (Â°C)', y = "Composition") +
          facet_wrap(~event, scales = 'free', ncol = 2) +
          theme_bw() +
          theme(axis.text = element_text(color = 'black', size = 10),
                axis.title = element_text(size = 12),
                axis.title.x = element_text(margin = margin(t = 15)),
                panel.spacing = unit(1, "lines"),
                panel.background = element_rect(colour = 'black'),
                plot.margin = unit(c(0, 0, 2, 0), "cm"))

total_height <- 180 * length(unique(params$gc$event))
ggplotly(plot, width = 900, height = total_height)
```

:::

#### Mass detector

```{r}
#| column: body-outset

data <- params$ms %>%
        as_tibble() %>%
        select(time_absolute_date_time, `2_amu_hydrogen`, `18_amu_water`, `44_amu_co2_c3h8`) %>%
        mutate(time_absolute_date_time = as.POSIXct(time_absolute_date_time, origin="1970-01-01", tz="UTC"),
               across(.cols = contains('amu'),
                      .fns = ~smooth.spline(.x, spar = 0)$y)) %>%
        rename_with(.fn = ~str_replace_all(.x, '_', ' '), .cols = contains('_amu_')) 

dygraph(data, xlab = 'Reaction Time (min)') %>%
  dyRangeSelector() %>%
  dyLegend(width = 800) %>%
  dyOptions(useDataTimezone = TRUE) %>%
  dyOptions(strokeWidth = 2)
```